services:
  # ----------------------------------------------------
  # MinIO Service (S3-compatible storage)
  # ----------------------------------------------------
  minio:
    image: minio/minio:latest
    container_name: minio_server
    # Map ports 9000 (API) and 9001 (Console UI)
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      # These must match the values expected in jar_repo/settings.py
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      # Persist data in a local folder named 'minio_data'
      - ./minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: always

  # ----------------------------------------------------
  # Redis (Celery broker)
  # ----------------------------------------------------
  redis:
    image: redis:7-alpine
    container_name: redis_server
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: ["redis-server", "--appendonly", "yes"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always

  # ----------------------------------------------------
  # Django API Service
  # ----------------------------------------------------
  # api:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: django_api
  #   # Expose the API port
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     # Inject S3 configuration from the MinIO service
  #     S3_ENDPOINT: "http://minio:9000" # Use the MinIO service name as the hostname
  #     S3_ACCESS_KEY: minioadmin
  #     S3_SECRET_KEY: minioadmin
  #     S3_BUCKET_NAME: minecraft-repo # Ensure this bucket exists or is created
      
  #     # Django settings
  #     DJANGO_SECRET_KEY: 'some-secure-key-for-prod'
  #     DJANGO_DEBUG: "True"
    
  #   # Ensure MinIO is running and healthy before starting the API
  #   depends_on:
  #     minio:
  #       condition: service_healthy
  #   restart: always

volumes:
  redis_data: